---
import CustomerEmail from './form-fields/CustomerEmail.astro';
import PurchaseDate from './form-fields/PurchaseDate.astro';
import Interests from './form-fields/Interests.astro';
---

<form id="demo-form-2" novalidate action="" method="post">
  <fieldset>
    <legend>Customer details</legend>
    <CustomerEmail />
    <span id="customer-email-error" class="error"></span>
  </fieldset>

  <fieldset>
    <legend>Purchase details</legend>
    <PurchaseDate />
    <span id="purchase-date-error" class="error"></span>
  </fieldset>

  <fieldset>
    <legend>Choose your interests</legend>
    <Interests />
  </fieldset>

  <button type="submit">Submit</button>
</form>

<script>
  const form = document.querySelector('#demo-form-2');
  // Get input elements that can be validated using the Constraint Validation API.
  const inputEls: NodeListOf<HTMLInputElement> = document.querySelectorAll(
    '.js-constraint-validation'
  );

  /**
   * Validate input fields using the Constraint Validation API
   * @returns {boolean} Was an error found?
   */
  const useConstraintValidationApi = (): boolean => {
    /** @type {boolean} */
    let errorFound: boolean;
    inputEls.forEach((inputEl) => {
      // Check if the input is valid via the Constraint Validation API.
      if (!inputEl.validity.valid) {
        // If `errorFound` has not been set, that means this input element is
        // the first input that is not valid. Use that knowledge to:
        // 1. Set the `errorFound` value
        // 2. Set focus on the input
        if (!errorFound) {
          errorFound = true; // 1
          inputEl.focus(); // 2
        }
        // The validation error message displays in the next sibling element.
        // Use the validation message from the Constraint Validation API
        inputEl.nextSibling.textContent = inputEl.validationMessage;
      } else {
        // Make sure to clear the validation error message if the input is valid.
        inputEl.nextSibling.textContent = '';
      }
    });
    return errorFound;
  };

  /**
   * Handler for form `submit` event
   * @param {SubmitEvent} event
   */
  const onFormSubmit = (event: SubmitEvent) => {
    const hasConstraintValidationError = useConstraintValidationApi();
    if (hasConstraintValidationError) {
      event.preventDefault();
    }
  };

  form.addEventListener('submit', onFormSubmit);
</script>
