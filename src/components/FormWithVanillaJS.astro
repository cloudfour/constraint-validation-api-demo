---
import CustomerEmail from './form-fields/CustomerEmail.astro';
import PurchaseDate from './form-fields/PurchaseDate.astro';
import Interests from './form-fields/Interests.astro';
import CustomerNameFirst from './form-fields/CustomerNameFirst.astro';
---

<form id="demo-form-2" action="" method="post">
  <fieldset>
    <legend>Customer details</legend>
    <div>
      <CustomerNameFirst />
      <p hidden class="error"></p>
    </div>
    <div>
      <CustomerEmail />
      <p hidden class="error"></p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Purchase details</legend>
    <PurchaseDate />
    <p hidden class="error"></p>
  </fieldset>

  <fieldset>
    <legend>Interests</legend>
    <Interests />
    <p hidden class="error js-interests-validation-error"></p>
  </fieldset>

  <button type="submit">Submit</button>
</form>

<style lang="scss">
  .error {
    color: red;
    display: flex;

    &::before {
      content: '';
      // background-image: url("data:image/svg+xml,%3Csvg width='12' height='12' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke='red' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' fill='none'%3E%3Cpath d='M12 10v3M12 16h0M12.862 4.465l8.252 14.028A1 1 0 0 1 20.252 20H3.748a1 1 0 0 1-.862-1.507l8.252-14.028a1 1 0 0 1 1.724 0Z'/%3E%3C/svg%3E%0A");
      background-image: url("data:image/svg+xml,%3Csvg height='12' width='12' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 460.775 460.775' xml:space='preserve'%3E%3Cpath fill='red' d='M285.08 230.397 456.218 59.27c6.076-6.077 6.076-15.911 0-21.986L423.511 4.565a15.55 15.55 0 0 0-21.985 0l-171.138 171.14L59.25 4.565a15.551 15.551 0 0 0-21.985 0L4.558 37.284c-6.077 6.075-6.077 15.909 0 21.986l171.138 171.128L4.575 401.505c-6.074 6.077-6.074 15.911 0 21.986l32.709 32.719a15.555 15.555 0 0 0 21.986 0l171.117-171.12 171.118 171.12a15.551 15.551 0 0 0 21.985 0l32.709-32.719c6.074-6.075 6.074-15.909 0-21.986L285.08 230.397z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: left top 0.1em;
      padding-inline-start: 1.5em;
      background-size: 1em;
    }
  }
</style>

<script>
  // Update body JS state class
  // @todo Use data attribute
  document.body.classList.add('js-enabled');
  document.body.classList.remove('no-js');

  /** @type {HTMLFormElement} */
  const form: HTMLFormElement = document.querySelector('#demo-form-2');
  // Disable built-in validation. The Constraint Validation API to be used instead.
  form.setAttribute('novalidate', 'true');

  /**
   * Update the validation UI state for a given input element.
   * @param {HTMLInputElement} inputEl The input element to update the UI state for.
   */
  const updateValidationUiStateForInput = (inputEl: HTMLInputElement) => {
    // Get the error message element for the current input element.
    const errorEl = inputEl.nextElementSibling as HTMLElement;
    // Check if the input is valid using the Constraint Validation API.
    if (inputEl.checkValidity()) {
      inputEl.classList.add('is-valid');
      inputEl.classList.remove('is-invalid');
      errorEl.textContent = '';
      errorEl.hidden = true;
    } else {
      inputEl.classList.remove('is-valid');
      inputEl.classList.add('is-invalid');
      // Use the validation message from the Constraint Validation API.
      errorEl.textContent = inputEl.validationMessage;
      errorEl.hidden = false;
    }
  };

  /**
   * Validate input fields using the Constraint Validation API.
   * @returns {boolean} Was an invalid field found?
   */
  const useConstraintValidationApi = (): boolean => {
    // Keep track of the validation state.
    let areAllConstraintValidationFieldsValid = true;
    // Keep track of the first invalid input element.
    let firstInvalidInputEl: HTMLInputElement | null = null;
    // Loop all inputs that can be validated with the Constraint Validation API.
    document
      .querySelectorAll('.js-validate')
      .forEach((inputEl: HTMLInputElement) => {
        // If the first invalid input element has not been set, set it to the
        // current input element. Also, update the validation state.
        if (!inputEl.checkValidity() && !firstInvalidInputEl) {
          firstInvalidInputEl = inputEl;
          areAllConstraintValidationFieldsValid = false;
        }
        // Update the UI
        updateValidationUiStateForInput(inputEl);
      });
    // If there is an invalid input element, focus on it.
    firstInvalidInputEl?.focus();
    // Return if all input elements are valid.
    return areAllConstraintValidationFieldsValid;
  };

  /**
   * Validates the "interests" checkbox group.
   * Custom validation is required because checkbox group validation is not
   * supported by the Constraint Validation API.
   * @return {boolean} Is the "interests" checkbox group valid?
   */
  const validateInterestsCheckboxGroup = (): boolean => {
    // Get the element where the validation error message will be displayed.
    const errorEl = document.querySelector(
      '.js-interests-validation-error'
    ) as HTMLElement;
    // Check if any "interests" were checked.
    const isInterestsValid = new FormData(form).getAll('interests').length > 0;
    // Update the UI.
    if (isInterestsValid) {
      errorEl.textContent = 'Please choose at least one interest.';
      errorEl.hidden = false;
    } else {
      errorEl.textContent = '';
      errorEl.hidden = true;
    }
    // Return the validation state.
    return isInterestsValid;
  };

  /**
   * Handler for form `submit` event.
   * @param {SubmitEvent} event
   */
  const onFormSubmit = (event: SubmitEvent) => {
    const areAllConstraintValidationFieldsValid = useConstraintValidationApi();
    const isInterestsValid = validateInterestsCheckboxGroup();

    // If any of the validation checks fail, prevent the form from submitting.
    if (!areAllConstraintValidationFieldsValid || !isInterestsValid) {
      event.preventDefault();
    }
  };

  form.addEventListener('submit', onFormSubmit);
</script>
