---
import CustomerEmail from './form-fields/CustomerEmail.astro';
import PurchaseDate from './form-fields/PurchaseDate.astro';
import CustomerNameFirst from './form-fields/CustomerNameFirst.astro';
import CustomerNameLast from './form-fields/CustomerNameLast.astro';
import ToggleCheckbox from './form-fields/ToggleCheckbox.astro';
---

<form id="demo-form-2" action="" method="post">
  <fieldset>
    <legend>Customer details</legend>
    <div class="field-wrapper">
      <CustomerNameFirst />
      <p hidden class="error"></p>
    </div>
    <div class="field-wrapper">
      <CustomerNameLast />
      <p hidden class="error"></p>
    </div>
    <div class="field-wrapper">
      <CustomerEmail />
      <p hidden class="error"></p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Purchase details</legend>
    <div class="field-wrapper">
      <PurchaseDate />
      <p hidden class="error"></p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Interests</legend>
    <span class="pseudo-label">Choose at least one interest.</span>
    <div class="field-wrapper checkbox-field-wrapper js-checkbox-field-wrapper">
      <ToggleCheckbox
        id="coding"
        name="interests"
        value="coding"
        label="Coding"
      />
      <ToggleCheckbox id="music" name="interests" value="music" label="Music" />
      <ToggleCheckbox id="art" name="interests" value="art" label="Art" />
      <ToggleCheckbox
        id="sports"
        name="interests"
        value="sports"
        label="Sports"
      />
      <p hidden class="error js-interests-validation-error"></p>
    </div>
  </fieldset>

  <button type="submit">Submit</button>
</form>

<script>
  /**
   * Update the validation UI state for a given input element.
   * @param {HTMLInputElement} inputEl The input element to update the UI state for.
   */
  const updateValidationUiStateForInput = (inputEl: HTMLInputElement) => {
    // Check if the input is valid using the Constraint Validation API.
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checkValidity
    const isInputValid = inputEl.checkValidity();
    // Update the valid/invalid state classes.
    inputEl.classList.toggle('is-valid', isInputValid);
    inputEl.classList.toggle('is-invalid', !isInputValid);
    // When JS is enabled, the default built-in error messages are not shown,
    // the code needs to set the error messages manually.
    // 1. Get the error message element for the current input element.
    // 2. Use the browser built-in localized validation message. Will be
    //    an empty string if input constraints are satisfied.
    //    https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage
    const errorEl = inputEl.nextElementSibling as HTMLElement;
    errorEl.textContent = inputEl.validationMessage;
    // Show/hide the error message depending on the input's validity.
    errorEl.hidden = isInputValid;
  };

  /**
   * Validates the "interests" checkbox group.
   * Custom validation is required because checkbox group validation is not
   * supported by the Constraint Validation API.
   * @return {boolean} Is the "interests" checkbox group valid?
   */
  const validateInterestsCheckboxGroup = (): boolean => {
    // Get the element where the validation error message will be displayed.
    const errorEl = document.querySelector(
      '.js-interests-validation-error'
    ) as HTMLElement;
    // Get all the "interests" checkboxes.
    const interestsCheckboxInputEls = document.querySelectorAll(
      'input[name="interests"]'
    );
    // Get the wrapper element for the "interests" checkbox group.
    const checkboxGroupWrapperEl = document.querySelector(
      '.js-checkbox-field-wrapper'
    );

    // Are any of the "interests" checkboxes checked?
    const isInterestsValid =
      document.querySelectorAll('input[name="interests"]:checked').length > 0;
    // Need to place the `is-valid` class higher up in the DOM tree to
    // show a validation state icon (one icon for the group of checkboxes).
    checkboxGroupWrapperEl.classList.toggle('is-valid', isInterestsValid);
    checkboxGroupWrapperEl.classList.toggle('is-invalid', !isInterestsValid);
    // Update the validation UI state for each checkbox.
    interestsCheckboxInputEls.forEach((checkboxInputEl: HTMLInputElement) => {
      checkboxInputEl.classList.toggle('is-valid', isInterestsValid);
      checkboxInputEl.classList.toggle('is-invalid', !isInterestsValid);
    });
    // Update the error message.
    errorEl.textContent = isInterestsValid
      ? ''
      : 'At least one interest is required.';
    // Show/hide the error message depending on the checkbox group's validity.
    errorEl.hidden = isInterestsValid;

    // Return the validation state.
    return isInterestsValid;
  };

  /**
   * Handler for form `submit` event.
   * @param {SubmitEvent} event
   */
  const onSubmit = (event: SubmitEvent) => {
    const formEl = event.target as HTMLFormElement;
    // Set the focus to the first invalid input.
    const firstInvalidInputEl = formEl.querySelector(
      'input:invalid'
    ) as HTMLInputElement;
    firstInvalidInputEl?.focus();
    // Update the validation UI state for all inputs that can be validated
    // with the Constraint Validation API.
    document
      .querySelectorAll('.js-validate')
      .forEach(updateValidationUiStateForInput);
    // The `isFormValid` boolean respresents all inputs that can be
    // validated via the Constraint Validation API.
    const isFormValid = formEl.checkValidity();
    // Fields that cannot be validated with the Constraint Validation API need
    // to be validated manually. This includes the "interests" checkbox group.
    const isInterestsGroupValid = validateInterestsCheckboxGroup();
    // If any of the validation checks fail, prevent the form from submitting.
    if (!isFormValid || !isInterestsGroupValid) {
      event.preventDefault();
    }
  };

  /**
   * Initialize validation setup
   */
  const init = () => {
    // Update the JS enabled state.
    document.body.dataset.jsEnabled = 'true';

    /** @type {HTMLFormElement} */
    const formEl: HTMLFormElement = document.querySelector('#demo-form-2');
    // Disable built-in form submit validation.
    // The Constraint Validation API will be used instead.
    formEl.setAttribute('novalidate', 'true');
    // Listen for a form `submit` event.
    formEl.addEventListener('submit', onSubmit);

    // Set up `blur` and `input` validation for the inputs that can be validated
    // with the Constraint Validation API.
    document.querySelectorAll('.js-validate').forEach((inputEl) => {
      inputEl.addEventListener('input', (event) =>
        updateValidationUiStateForInput(event.target as HTMLInputElement)
      );
      inputEl.addEventListener('blur', (event) =>
        updateValidationUiStateForInput(event.target as HTMLInputElement)
      );
    });

    // Set up `blur` validation for the "interests" checkbox group.
    document
      .querySelectorAll('input[name="interests"]')
      .forEach((checkboxInputEl) => {
        // Updates the UI state for the checkbox group when checked/unchecked
        checkboxInputEl.addEventListener('change', (event: Event) => {
          validateInterestsCheckboxGroup();
        });
        // Handles the case where the user tabs into the checkbox group and then
        // tabs out without checking any checkboxes.
        checkboxInputEl.addEventListener('blur', (event: FocusEvent) => {
          // Only validate the checkbox group if the user is no longer focused
          // on any of the checkboxes.
          // relatedTarget is the element that will receive focus next.
          const activeEl = event.relatedTarget as HTMLElement;
          if (activeEl?.getAttribute('name') !== 'interests') {
            validateInterestsCheckboxGroup();
          }
        });
      });

    // On page load, if a checkbox is checked, update UI state
    if (
      document.querySelectorAll('input[name="interests"]:checked').length > 0
    ) {
      validateInterestsCheckboxGroup();
    }

    // This is wrapped in a try/catch so as not to throw an error in unsupported browsers.
    try {
      // The `:user-invalid` CSS pseudo-class state sticks around on a page
      // refresh in Firefox (and maybe other browsers in the future). The code
      // below ensures that the invalid inputs also get their error message
      // displayed appropriately.
      document
        .querySelectorAll('input:user-invalid')
        .forEach(updateValidationUiStateForInput);
    } catch (error) {
      console.warn('The `:user-invalid` CSS pseudo-class is not supported.');
    }
  };

  init();
</script>
