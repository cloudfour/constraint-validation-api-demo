---
import CustomerEmail from './form-fields/CustomerEmail.astro';
import PurchaseDate from './form-fields/PurchaseDate.astro';
import Interests from './form-fields/Interests.astro';
---

<script>
  /** @type {HTMLFormElement} */
  const form: HTMLFormElement = document.querySelector('#demo-form-2');
  // Get input elements that can be validated using the Constraint Validation API.
  const inputEls: NodeListOf<HTMLInputElement> = document.querySelectorAll(
    '.js-constraint-validation'
  );

  /**
   * Validate input fields using the Constraint Validation API
   * @returns {boolean} Was an invalid field found?
   */
  const useConstraintValidationApi = (): boolean => {
    // Loop through all input elements and update the validation error message.
    inputEls.forEach((inputEl) => {
      // Use the Constraint Validation API to check if the input is valid.
      // If valid: clear error message.
      // If not valid: use validation message from Constraint Validation API.
      inputEl.nextElementSibling.textContent = input.validity.valid
        ? ''
        : inputEl.validationMessage;
    });

    // Keep track of the validation state.
    let areAllFieldsValid = true;
    // Find the first invalid input element using the Constraints Validation API.
    const invalidInput = [...inputEls].find(
      (inputEl) => !inputEl.validity.valid
    );
    // If there is an invalid input, focus on it and update the validation state.
    if (invalidInput) {
      invalidInput.focus();
      areAllFieldsValid = false;
    }
    // Return the validation state.
    return areAllFieldsValid;
  };

  /**
   * Validate the "interests" checkbox group.
   * @return {boolean} Is the "interests" checkbox group valid?
   */
  const validateInterestsCheckboxGroup = (): boolean => {
    // Keep track of if the "interests" checkbox group is valid.
    let isInterestsValid: boolean;
    // Get the element where the validation error message will be displayed.
    const errorMessageEl = document.querySelector(
      '.js-interests-validation-error'
    );
    // Get the form data to get all of the 'interests' checked values. Check
    // if any "interests" were checked.
    if (new FormData(form).getAll('interests').length === 0) {
      isInterestsValid = false;
      // Set validation error message
      errorMessageEl.textContent = 'Please choose at least one interest.';
    } else {
      isInterestsValid = true;
      // Unset validation error
      errorMessageEl.textContent = '';
    }
    // Return the validation state.
    return isInterestsValid;
  };

  /**
   * Handler for form `submit` event
   * @param {SubmitEvent} event
   */
  const onFormSubmit = (event: SubmitEvent) => {
    const areConstraintValidationFieldsValid = useConstraintValidationApi();
    const isInterestsValid = validateInterestsCheckboxGroup();

    // Stop form submit if there are any input validation errors
    if (!areConstraintValidationFieldsValid || !isInterestsValid) {
      event.preventDefault();
    }
  };

  form.addEventListener('submit', onFormSubmit);
</script>

<form id="demo-form-2" novalidate action="" method="post">
  <fieldset>
    <legend>Customer details</legend>
    <CustomerEmail />
    <p class="error"></p>
  </fieldset>

  <fieldset>
    <legend>Purchase details</legend>
    <PurchaseDate />
    <p class="error"></p>
  </fieldset>

  <fieldset>
    <legend>Interests</legend>
    <Interests />
    <p class="error js-interests-validation-error"></p>
  </fieldset>

  <button type="submit">Submit</button>
</form>

<style>
  .error {
    color: red;
  }
</style>
