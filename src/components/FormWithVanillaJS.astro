---
import CustomerDetailsFieldset from './fieldsets/CustomerDetailsFieldset.astro';
import InterestsFieldset from './fieldsets/InterestsFieldset.astro';
import PurchaseDetailsFieldset from './fieldsets/PurchaseDetailsFieldset.astro';
---

<form id="demo-form" action="" method="post">
  <CustomerDetailsFieldset />
  <PurchaseDetailsFieldset />
  <InterestsFieldset />

  <button type="submit">Submit</button>
</form>

<script>
  import { validateInterestsCheckboxGroup } from '../form-validation/validateInterestsCheckboxGroup';

  /**
   * Update the validation UI state for a given input element.
   * @param {HTMLInputElement} inputEl The input element to update the UI state for.
   */
  const updateValidationStateForInput = (inputEl: HTMLInputElement) => {
    // Check if the input is valid using the Constraint Validation API.
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checkValidity
    const isInputValid = inputEl.checkValidity();

    // Handle optional empty fields
    // For Firefox and Safari: Also check if valid because type="number" fields
    // report an empty string value when they have a non-numeric values.
    if (!inputEl.required && inputEl.value === '' && isInputValid) {
      // Clear validation state
      inputEl.classList.remove('is-valid', 'is-invalid');
    } else {
      // Required fields: Toggle valid/invalid state classes
      inputEl.classList.toggle('is-valid', isInputValid);
      inputEl.classList.toggle('is-invalid', !isInputValid);
    }

    // Update the `aria-invalid` state when validation occurs
    // https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA21
    inputEl.setAttribute('aria-invalid', String(!isInputValid));

    // When JS is enabled, the default built-in error messages are not shown,
    // the code needs to set the error messages manually.
    // 1. Get the error message element for the current input element.
    // 2. Use the browser built-in localized validation message. Will be
    //    an empty string if input constraints are satisfied.
    //    https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage
    const errorEl = inputEl.nextElementSibling as HTMLElement;
    errorEl.textContent = inputEl.validationMessage;
    // Show/hide the error message depending on the input's validity.
    errorEl.hidden = isInputValid;
  };

  /**
   * Handler for form `submit` event.
   * @param {SubmitEvent} event
   */
  const onSubmit = (event: SubmitEvent) => {
    const formEl = event.target as HTMLFormElement;
    // Update the validation UI state for all inputs that can be validated
    // with the Constraint Validation API.
    document
      .querySelectorAll('.js-validate')
      .forEach(updateValidationStateForInput);
    // The `isFormValid` boolean respresents all inputs that can be
    // validated via the Constraint Validation API.
    const isFormValid = formEl.checkValidity();
    // Fields that cannot be validated with the Constraint Validation API need
    // to be validated manually. This includes the "interests" checkbox group.
    const isInterestsGroupValid = validateInterestsCheckboxGroup(formEl);
    // If any of the validation checks fail, prevent the form from submitting.
    if (!isFormValid || !isInterestsGroupValid) {
      event.preventDefault();
    }
    // Set the focus to the first invalid input.
    const firstInvalidInputEl = formEl.querySelector(
      'input:invalid, fieldset.is-invalid input'
    ) as HTMLInputElement;
    firstInvalidInputEl?.focus();
  };

  /**
   * Initialize validation setup
   */
  const init = () => {
    // Update the JS enabled state.
    document.body.dataset.jsEnabled = 'true';

    // Get the form element.
    const formEl: HTMLFormElement = document.querySelector('#demo-form');
    // Turn off default form submit validation by adding `novalidate` attribute.
    formEl.setAttribute('novalidate', '');
    // Use form `submit` event to validate with Constraint Validation API instead.
    formEl.addEventListener('submit', onSubmit);

    document
      .querySelectorAll('.js-validate')
      .forEach((inputEl: HTMLInputElement) => {
        // Set up `blur` and `input` validation for the inputs that can be validated
        // with the Constraint Validation API.
        inputEl.addEventListener('input', (event) =>
          updateValidationStateForInput(event.target as HTMLInputElement)
        );
        inputEl.addEventListener('blur', (event) =>
          updateValidationStateForInput(event.target as HTMLInputElement)
        );
        // Adding `aria-invalid` provides users who use assistive technology
        // with a way to know if the input is invalid.
        // Should initially be set to `false` before interaction/validity check.
        inputEl.setAttribute('aria-invalid', 'false');

        // Update the state for prefilled inputs.
        if (inputEl.value !== '') {
          updateValidationStateForInput(inputEl);
        }
      });

    // Set up `blur` and `change` validation for the "interests" checkbox group.
    document
      .querySelectorAll('input[name="interests"]')
      .forEach((checkboxInputEl) => {
        // Updates the UI state for the checkbox group when checked/unchecked
        checkboxInputEl.addEventListener('change', () =>
          validateInterestsCheckboxGroup(formEl)
        );
        // Set up late validation for the checkbox group
        checkboxInputEl.addEventListener('blur', (event: FocusEvent) => {
          // FocusEvent.relatedTarget is the element receiving focus.
          const activeEl = event.relatedTarget as HTMLElement;
          // Validate only if the focus is not going to another checkbox.
          if (activeEl?.getAttribute('name') !== 'interests') {
            validateInterestsCheckboxGroup(formEl);
          }
        });
      });

    // On page load, if a checkbox is checked, update UI state
    const isInterestsGroupChecked =
      document.querySelectorAll('input[name="interests"]:checked').length > 0;
    if (isInterestsGroupChecked) {
      validateInterestsCheckboxGroup(formEl);
    }
  };

  init();
</script>
