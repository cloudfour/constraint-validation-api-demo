---
import CustomerEmail from './form-fields/CustomerEmail.astro';
import PurchaseDate from './form-fields/PurchaseDate.astro';
import CustomerNameFirst from './form-fields/CustomerNameFirst.astro';
import CustomerNameLast from './form-fields/CustomerNameLast.astro';
import ToggleCheckbox from './form-fields/ToggleCheckbox.astro';
---

<form id="demo-form-2" action="" method="post">
  <fieldset>
    <legend>Customer details</legend>
    <div class="field-wrapper">
      <CustomerNameFirst />
      <p class="error"></p>
    </div>
    <div class="field-wrapper">
      <CustomerNameLast />
      <p class="error"></p>
    </div>
    <div class="field-wrapper">
      <CustomerEmail />
      <p class="error"></p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Purchase details</legend>
    <div class="field-wrapper">
      <PurchaseDate />
      <p class="error"></p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Interests</legend>
    <div class="field-wrapper checkbox-field-wrapper">
      <ToggleCheckbox
        id="coding"
        name="interests"
        value="coding"
        label="Coding"
      />
      <ToggleCheckbox id="music" name="interests" value="music" label="Music" />
      <ToggleCheckbox id="art" name="interests" value="art" label="Art" />
      <ToggleCheckbox
        id="sports"
        name="interests"
        value="sports"
        label="Sports"
      />
      <p hidden class="error js-interests-validation-error"></p>
    </div>
  </fieldset>

  <button type="submit">Submit</button>
</form>

<style lang="scss">
  html,
  body {
    margin: 0;
    padding: 0;

    @media ((prefers-color-scheme: dark)) {
      background-color: #000;
    }
  }
  button {
    margin-block-start: 1.5em;
  }

  .checkbox-field-wrapper {
    background-image: var(--bg-valid);
    background-repeat: no-repeat;
    background-position: right 0.3em center;
    background-size: 1.8em;
    padding-inline-end: 2.2em;
  }
</style>

<script>
  /**
   * Update the validation UI state for a given input element.
   * @param {HTMLInputElement} inputEl The input element to update the UI state for.
   */
  const updateValidationUiStateForInput = (inputEl: HTMLInputElement) => {
    // Get the error message element for the current input element.
    const errorEl = inputEl.nextElementSibling as HTMLElement;
    // Check if the input is valid using the Constraint Validation API.
    if (inputEl.checkValidity()) {
      inputEl.classList.add('is-valid');
      inputEl.classList.remove('is-invalid');
      errorEl.textContent = '';
    } else {
      inputEl.classList.remove('is-valid');
      inputEl.classList.add('is-invalid');
      // Use the validation message from the Constraint Validation API.
      errorEl.textContent = inputEl.validationMessage;
    }
  };

  /**
   * Validate input fields using the Constraint Validation API.
   * @returns {boolean} Was an invalid field found?
   */
  const useConstraintValidationApi = (): boolean => {
    // Keep track of the validation state.
    let areAllConstraintValidationFieldsValid = true;
    // Keep track of the first invalid input element.
    let firstInvalidInputEl: HTMLInputElement | null = null;
    // Loop all inputs that can be validated with the Constraint Validation API.
    document
      .querySelectorAll('.js-validate')
      .forEach((inputEl: HTMLInputElement) => {
        // If the first invalid input element has not been set, set it to the
        // current input element. Also, update the validation state.
        if (!inputEl.checkValidity() && !firstInvalidInputEl) {
          firstInvalidInputEl = inputEl;
          areAllConstraintValidationFieldsValid = false;
        }
        // Update the UI
        updateValidationUiStateForInput(inputEl);
      });
    // If there is an invalid input element, focus on it.
    firstInvalidInputEl?.focus();
    // Return if all input elements are valid.
    return areAllConstraintValidationFieldsValid;
  };

  /**
   * Validates the "interests" checkbox group.
   * Custom validation is required because checkbox group validation is not
   * supported by the Constraint Validation API.
   * @return {boolean} Is the "interests" checkbox group valid?
   */
  const validateInterestsCheckboxGroup = (form: HTMLFormElement): boolean => {
    console.log('validateInterestsCheckboxGroup');
    // Get the element where the validation error message will be displayed.
    const errorEl = document.querySelector(
      '.js-interests-validation-error'
    ) as HTMLElement;
    // Check if any "interests" were checked.
    const isInterestsValid = new FormData(form).getAll('interests').length > 0;
    const checkboxGroupEls = document.querySelectorAll('[name="interests"]');

    // Update the UI.
    if (isInterestsValid) {
      checkboxGroupEls.forEach((inputEl: HTMLInputElement) => {
        inputEl.classList.add('is-valid');
        inputEl.classList.remove('is-invalid');
      });
      errorEl.textContent = '';
      errorEl.hidden = true;
    } else {
      checkboxGroupEls.forEach((inputEl: HTMLInputElement) => {
        inputEl.classList.remove('is-valid');
        inputEl.classList.add('is-invalid');
      });
      errorEl.textContent = 'Please choose at least one interest.';
      errorEl.hidden = false;
    }

    // Return the validation state.
    return isInterestsValid;
  };

  /**
   * Handler for form `submit` event.
   * @param {SubmitEvent} event
   */
  const onSubmit = (event: SubmitEvent) => {
    const areAllConstraintValidationFieldsValid = useConstraintValidationApi();
    const isInterestsValid = validateInterestsCheckboxGroup(
      event.target as HTMLFormElement
    );
    // If any of the validation checks fail, prevent the form from submitting.
    if (!areAllConstraintValidationFieldsValid || !isInterestsValid) {
      event.preventDefault();
    }
  };

  /**
   * Initialize validation setup
   */
  const init = () => {
    // Update body JS state class
    // @todo Use data attribute
    document.body.classList.add('js-enabled');
    document.body.classList.remove('no-js');

    /** @type {HTMLFormElement} */
    const form: HTMLFormElement = document.querySelector('#demo-form-2');
    // Disable built-in validation. The Constraint Validation API to be used instead.
    form.setAttribute('novalidate', 'true');
    // Listen for a form `submit` event.
    form.addEventListener('submit', onSubmit);

    // Set up `blur` validation for the "interests" checkbox group.
    document
      .querySelectorAll('input[name="interests"]')
      .forEach((checkboxEl) => {
        checkboxEl.addEventListener('blur', () => {
          // Use a setTimeout to wait for the focus to move to the next element.
          setTimeout(() => {
            // Only validate when the user moves focus away from the "interests"
            // checkbox group.
            if (document.activeElement.getAttribute('name') !== 'interests') {
              validateInterestsCheckboxGroup(form);
            }
          }, 100);
        });
      });

    // Set up `blur` and `input` validation for the inputs that can be validated
    // with the Constraint Validation API.
    document.querySelectorAll('.js-validate').forEach((inputEl) => {
      inputEl.addEventListener('input', (event) =>
        updateValidationUiStateForInput(event.target as HTMLInputElement)
      );
      inputEl.addEventListener('blur', (event) =>
        updateValidationUiStateForInput(event.target as HTMLInputElement)
      );
    });

    // The `user-invalid` CSS pseudo-class will stick around on a page refresh.
    // This ensures that the invalid inputs also get the error message displayed.
    document
      .querySelectorAll('input:user-invalid')
      .forEach((inputEl: HTMLInputElement) =>
        updateValidationUiStateForInput(inputEl)
      );
  };

  init();
</script>
