---
import Layout from '../layouts/Layout.astro';

import FormWithSvelteAndVest from '../components/FormWithSvelteAndVest.svelte';
import FormWithVanillaJS from '../components/FormWithVanillaJS.astro';
---

<Layout title="Demo land!">
  <main>
    <h2>Progressively enhanced form</h2>
    <p>
      This form uses browser built-in validation when JS is not available. The
      form is enhanced with Vanilla JS + the Constraints Validation API when JS
      is available.
    </p>
    <FormWithVanillaJS />
    <h2>Svelte + Vest</h2>
    <FormWithSvelteAndVest client:idle />
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
</style>

<style is:global>
  :root {
    --color-valid: green;
    --color-invalid: red;
  }

  [hidden] {
    display: none;
  }

  input:user-invalid {
    border-color: var(--color-invalid);
  }
  input:user-valid {
    border-color: var(--color-valid);
  }

  /** 
   * Fallback to `no-js`/`js-enabled` state classes 
   */
  @supports not selector(:user-invalid) {
    /**
     * 1. Delay  the `:invalid` and `:valid` UI states when no JS is available
     *    - The `placeholder` attribute (can be blank) is required for this to work.
     *    - Doesn't seem to work on date input elements.
     *    - Doesn't show invalid state on submit.
     *    @see https://www.bram.us/2021/01/28/form-validation-you-want-notfocusinvalid-not-invalid/
     * 2. Use state classes to show the invalid/valid UI states when JS is available
     */

    .no-js input:not(:focus):not(:placeholder-shown):invalid, /* 1 */
    .js-enabled input.is-invalid {
      border-color: var(--color-invalid);
    }

    .no-js input:not(:focus):not(:placeholder-shown):valid, /* 1 */
    .js-enabled input.is-valid {
      border-color: var(--color-valid);
    }
  }
</style>
